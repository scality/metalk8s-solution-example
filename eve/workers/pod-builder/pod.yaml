---
apiVersion: v1
kind: Pod
metadata:
  name: builder
spec:
  containers:
    - name: build-worker
      image: {{ images['builder'] }}
      command: ["/bin/sh"]
      args: ["-c", "buildbot-worker create-worker . ${BUILDMASTER}:${BUILDMASTER_PORT} ${WORKERNAME} ${WORKERPASS} && buildbot-worker start --nodaemon"]
      resources:
        requests:
          # Most of our build steps run in containers, hence to run concurrent
          # builds, we need to allocate CPUs to the subsystem running Docker,
          # rather than to the environment in which `doit` is merely executed.
          # There's a limit of 4 CPUs, so we assign one to `doit`, and 3 to
          # Docker.
          cpu: "1"
          memory: 2Gi
        limits:
          cpu: "1"
          memory: 2Gi
      env:
        - name: DOCKER_HOST
          value: localhost:2375
      volumeMounts:
        - name: worker-workspace
          mountPath: /home/eve/workspace
    - name: platform-dind-daemon
      image: docker:19.03.2-dind
      resources:
        requests:
          cpu: "3"
          memory: 3Gi
        limits:
          cpu: "3"
          memory: 3Gi
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ''
      securityContext:
        privileged: true
      volumeMounts:
        - name: docker-storage
          mountPath: /var/lib/docker
        - name: worker-workspace
          mountPath: /home/eve/workspace
  volumes:
    # The two volumes below are used to avoid intensive IO in the Docker overlay
    # If extra performance is required, one could add `medium: Memory` to the
    # `emptyDir` dicts.
    # See https://docs.docker.com/storage/volumes/
    - name: docker-storage
      emptyDir: {}
    - name: worker-workspace
      emptyDir: {}
